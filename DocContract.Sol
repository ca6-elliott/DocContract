// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract DocumentToken {
    string public name;
    string public symbol;
    uint8 public decimals;
    uint256 public totalSupply;

    mapping(address => uint256) balances;
    mapping(address => mapping(address => uint256)) allowed;

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
    event DocumentAdded(address indexed owner, string indexed documentHash);

    constructor() {
        name = "Document Token";
        symbol = "DOCT";
        decimals = 0;
        totalSupply = 0;
    }

    function balanceOf(address owner) public view returns (uint256) {
        return balances[owner];
    }

    function transfer(address to, uint256 value) public returns (bool) {
        require(to != address(0), "Invalid recipient address.");
        require(value <= balances[msg.sender], "Insufficient balance.");
        
        balances[msg.sender] -= value;
        balances[to] += value;
        emit Transfer(msg.sender, to, value);
        return true;
    }

    function transferFrom(address from, address to, uint256 value) public returns (bool) {
        require(to != address(0), "Invalid recipient address.");
        require(value <= balances[from], "Insufficient balance.");
        require(value <= allowed[from][msg.sender], "Insufficient allowance.");

        balances[from] -= value;
        balances[to] += value;
        allowed[from][msg.sender] -= value;
        emit Transfer(from, to, value);
        return true;
    }

    function approve(address spender, uint256 value) public returns (bool) {
        allowed[msg.sender][spender] = value;
        emit Approval(msg.sender, spender, value);
        return true;
    }

    function allowance(address owner, address spender) public view returns (uint256) {
        return allowed[owner][spender];
    }

    function addDocument(string memory documentHash) public returns (bool) {
        require(bytes(documentHash).length > 0, "Invalid document hash.");

        balances[msg.sender] += 1;
        totalSupply += 1;
        emit DocumentAdded(msg.sender, documentHash);
        return true;
    }
}
